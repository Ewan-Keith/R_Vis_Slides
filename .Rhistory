hist(log(faithful$waiting))
?Lognormal
hist(nlnorm(500))
hist(rlnorm(500))
hist(log(rlnorm(500)))
x <- rlnorm(500, meanlog = 5, sdlog = 2)
hist(x)
x <- rlnorm(500, meanlog = 2, sdlog = .5)
hist(x)
hist(log(x))
?hist
filter(x < 20)
x1 <- filter(x, x < 20)
str(x)
test < as.data.frame(x)
?filter
filter(x, x < 20)
filter(x, x < 20)
test < data.frame(x)
x2 <- x[x < 20,]
x2 <- x[x < 20]
hist(x2)
hist(log(x))
x <- rlnorm(500)
data("iris")
str(iris)
plot(iris$Petal.Length, iris$Petal.Width)
Scatterplot(iris$Petal.Length, iris$Petal.Width)
scatterplot(iris$Petal.Length, iris$Petal.Width)
library(lattice)
xyplot(Width ~ Length | Species,data = iris)
xyplot(Petal.Width ~ Petal.Length | Species,data = iris)
corplot(iris)
cor(iris)
pairs(iris[,1:4])
pairs(iris)
pairs(iris[,-'species'])
pairs(iris[,'species'])
pairs(iris[,1:4])
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
?p
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Treemap_Example')
tags$html(p("hello"), p(" goodbye"))
tags(p("hello"), p(" goodbye"))
tags$html(p("hello"), p(" goodbye"))
tags$body(p("hello"), p(" goodbye"))
tagsList(p("hello"), p(" goodbye"))
tagList(p("hello"), p(" goodbye"))
shiny::runApp('~/GitHub/Myanmar Dash/Treemap_Example')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
str(full_data)
?rep
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
unique(full_data$region)
raw_data <- read.csv('myanmar dash data.csv', stringsAsFactors = FALSE)
setwd("~/GitHub/Myanmar Dash/Myanmar Shiny")
raw_data <- read.csv('myanmar dash data.csv', stringsAsFactors = FALSE)
switch(raw_data$region,
Ayeyawady <- "Ayeyawady Region",
raw_data$region,)
switch(raw_data$region,
"Ayeyawady" <- "Ayeyawady Region",
raw_data$region,)
switch(raw_data$region,
"Ayeyawady" = "Ayeyawady Region",
raw_data$region,)
switch(raw_data$region,
Ayeyawady = Ayeyawady Region,
raw_data$region)
switch(raw_data$region,
Ayeyawady = "Ayeyawady Region",
raw_data$region)
?switch
raw_data <- read.csv('myanmar dash data.csv')#, stringsAsFactors = FALSE)
switch(raw_data$region,
Ayeyawady = "Ayeyawady Region",
raw_data$region)
raw_data <- read.csv('myanmar dash data.csv', stringsAsFactors = FALSE)
raw_data
raw_data$region
unique(raw_data$region)
switch(raw_data$region,
"Ayeyawady" = "Ayeyawady Region",
raw_data$region)
test <- c(1, 2)
test
switch(test, 1 = 3, 2 = 4)
raw_data$region  %>% mutate("Ayeyawady" = "Ayeyawady Region")
raw_data$region  %>% mutate(Ayeyawady = "Ayeyawady Region")
raw_data  %>% mutate(region, "Ayeyawady" = "Ayeyawady Region")
unique(raw_data$region)
raw_data  %>% mutate(region, "Ayeyawady" = "Ayeyawady Region", "Bago" = "Bago Region")
summary(raw_data  %>% mutate(region, "Ayeyawady" = "Ayeyawady Region", "Bago" = "Bago Region"))
for(i in 1:raw_data){
if(raw_data[i,] == "Ayeyawady"){
raw_data[i,] <- "Ayeyawady Region"
}
}
for(i in 1:nrow(raw_data)){
if(raw_data[i,] == "Ayeyawady"){
raw_data[i,] <- "Ayeyawady Region"
}
}
warnings()
raw_data <- read.csv('myanmar dash data.csv', stringsAsFactors = FALSE)
for(i in 1:nrow(raw_data)){
if(raw_data[i,"region"] == "Ayeyawady"){
raw_data[i,"region"] <- "Ayeyawady Region"
}
}
summary(raw_data$region)
str(raw_data$region)
unique(raw_data$region)
for(i in 1:nrow(raw_data)){
if(raw_data[i,"region"] == "Ayeyawady"){
raw_data[i,"region"] <- "Ayeyawady Region"
}
if(raw_data[i,"region"] == "Bago"){
raw_data[i,"region"] <- "Bago Region"
}
}
unique(raw_data$region)
raw_data <- read.csv('myanmar dash data.csv', stringsAsFactors = FALSE)
unique(raw_data$region)
for(i in 1:nrow(raw_data)){
if(raw_data[i,"region"] == "Ayeyawady"){
raw_data[i,"region"] <- "Ayeyawady Region"
}
if(raw_data[i,"region"] == "Bago"){
raw_data[i,"region"] <- "Bago Region"
}
if(raw_data[i,"region"] == "Chin"){
raw_data[i,"region"] <- "Chin State"
}
if(raw_data[i,"region"] == "Kachin"){
raw_data[i,"region"] <- "Kachin State"
}
if(raw_data[i,"region"] == "Kayah"){
raw_data[i,"region"] <- "Kayah State"
}
if(raw_data[i,"region"] == "Kayin"){
raw_data[i,"region"] <- "Kayin State"
}
if(raw_data[i,"region"] == "Magway"){
raw_data[i,"region"] <- "Magway Region"
}
if(raw_data[i,"region"] == "Mandalay"){
raw_data[i,"region"] <- "Mandalay Region"
}
if(raw_data[i,"region"] == "Mon"){
raw_data[i,"region"] <- "Mon State"
}
if(raw_data[i,"region"] == "Rakhine"){
raw_data[i,"region"] <- "Rakhine State"
}
if(raw_data[i,"region"] == "Sagaing"){
raw_data[i,"region"] <- "Sagaing Region"
}
if(raw_data[i,"region"] == "Shan"){
raw_data[i,"region"] <- "Shan State"
}
if(raw_data[i,"region"] == "Tanintharyi"){
raw_data[i,"region"] <- "Tanintharyi Region"
}
if(raw_data[i,"region"] == "Yangon"){
raw_data[i,"region"] <- "Yangon Region"
}
}
unique(raw_data$region)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(rsconnect)
deployApp()
str(iris)
regression_model <- lm(Petal.Width ~ Petal.Length, data = iris)
summary(regression_model)
plot(iris$Petal.Width, iris$Sepal.Length)
abline(regression_model)
plot(iris$Sepal.Length, iris$Petal.Width)
abline(regression_model)
regression_model <- lm(Petal.Width ~ Petal.Length, data = iris)
plot(iris$Sepal.Length, iris$Petal.Width)
abline(regression_model)
plot(iris$Sepal.Length ~ iris$Petal.Width)
abline(regression_model)
regression_model <- lm(Petal.Width ~ Petal.Length, data = iris)
plot(iris$Petal.Width ~ iris$Petal.Length)
abline(regression_model)
plot(iris$Petal.Width ~ iris$Petal.Length)
abline(regression_model)
par(mfrow=c(2,2))
plot(regression_model)
hist(iris$Petal.Length)
par(mfrow=c(1,1))
hist(iris$Petal.Length)
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
library(ggthemes)
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + theme_tufte()
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2) + theme_tufte()
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666") + theme_tufte()
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#add8e6") + theme_tufte()
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5)
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + theme_tufte()
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + scale_color_fivethirtyeight() +
theme_fivethirtyeight()
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + scale_color_fivethirtyeight() + xlab("Petal Width")
theme_fivethirtyeight()
```
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + scale_color_fivethirtyeight() + xlab("Petal Width") +
theme_fivethirtyeight()
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + scale_color_fivethirtyeight() +
theme_fivethirtyeight() + xlab("Petal Width")
ggplot(iris, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5) + scale_color_fivethirtyeight() +
theme_fivethirtyeight() + ggtitle("Petal Width Distribution")
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point() +
geom_smooth(method = lm)
ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +
geom_point() +
geom_smooth(method = lm) + scale_color_fivethirtyeight()
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point() +
geom_smooth(method = lm) + scale_color_fivethirtyeight()
ggplot(iris, aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point() +
geom_smooth(method = lm) + scale_color_fivethirtyeight() +
theme_fivethirtyeight()
install.packages("forecast")
library(forecast)
set.seed(22)
x <-ts(cumsum(rnorm(50, -2.5, 4)))
RWD.x <- rwf(x,  h=40, drift=TRUE, level=95)
ARIMA.x <- Arima(x, c(0,1,0), include.drift=TRUE)
plot(forecast(ARIMA.x, h=40, level=95))
lines(RWD.x$lower, lty=2)
lines(RWD.x$upper, lty=2)
```
library(forecast)
set.seed(1234)
y<-arima.sim(model=list(order=c(2,1,1),ar=c(0.5,.3),ma=0.3),n=144)
y<-ts(y,freq=12,start=c(2000,1))
#-- Extract Training Data, Fit the Wrong Model, and Forecast
yt<-window(y,end=2009.99)
yfit<-Arima(yt,order=c(1,0,1))
yfor<-forecast(yfit)
#---Extract the Data for ggplot using funggcast()
pd<-funggcast(y,yfor)
library(zoo)
pd<-funggcast(y,yfor)
sw<-c(2280, 1754, 1667, 1359, 1285, 1379, 2166, 1053, 1076, 1149, 1277, 1577, 1639, 1719, 1592, 2306, 3075, 2897, 1875, 1966, 2927, 3528, 2948, 2890, 3947, 3913, 3885, 4148, 5293, 5752, 6001, 7719, 5512, 6782, 6320, 6425, 6406, 7237, 8655, 9269, 12447, 13470, 13469, 13949, 17753, 17653, 14531, 14496, 13643, 12652, 12665, 10629, 8962, 8198, 6833, 5027, 4407, 4449, 4399, 5896, 6589, 3786, 4386, 4847, 5597, 5407, 4800, 7803, 9255, 10423, 5523, 8121, 6944, 8434, 9847, 9292, 9794, 10195, 10124, 11310, 12245, 12798, 14611, 15402, 13532, 16154, 15101, 14755, 17139, 16475, 19935, 19980, 25173, 28568, 27839, 28991, 27073, 29615, 25849, 27910, 27067, 21303, 20544, 15188, 13706, 9277, 10815, 7228, 4608, 4409, 9866, 8471, 8223, 6445, 6641, 6833, 11421, 8945, 8127, 10380, 12005, 13272, 9431, 12144, 14934, 14052, 11712, 14888, 15824, 17275, 18067, 19839, 21192, 22763, 22976, 23721, 22681, 20131, 19965, 20539, 19517, 22022, 23076, 30574, 40247, 43111, 39577, 40724, 44982, 44388, 46372, 43153, 36821, 32258, 31256, 27153, 23180, 18252, 16381, 13220, 12500, 10727, 9636, 8892, 8644, 9482, 9170, 10937, 12299, 15781, 11477, 16524, 16752, 18072, 14776, 13388, 18056, 19815, 21263, 22046, 26415, 24247, 25403, 30058, 26331, 32533, 31891, 35973, 27558, 24554, 25692, 25955, 24284, 24930, 28354, 34840, 40055, 42099, 42768, 48279, 50086, 56466, 42244, 51451, 44583, 39091, 33391, 29452, 25533)
swts <- ts(sw, frequency=52, start=c(2006,30))
swfc <- forecast(swts,h=52)
lambda <- BoxCox.lambda(sw)
swfc <- forecast(swts,h=52, lambda = lambda, robust = TRUE)
plot(swfc)
devtools::install_github("rasmusab/bayesian_first_aid")
install.packages('rjags')
devtools::install_github("rasmusab/bayesian_first_aid")
library(rjags)
devtools::install_github("rasmusab/bayesian_first_aid")
library(rjags)
devtools::install_github("rasmusab/bayesian_first_aid")
fit_male <- bayes.cor.test( ~ ratio_2d4d + grip_kg, data = d[ d$sex == "male",])
library(BayesianFirstAid)
d <- read.csv("2d4d_hone_2012.csv")
setwd("~/MoD_Work/R Visualisation Slides/mydeck")
d <- read.csv("2d4d_hone_2012.csv")
fit_male <- bayes.cor.test( ~ ratio_2d4d + grip_kg, data = d[ d$sex == "male",])
plot(fit_male)
library("lavaan")
# Example 5.8 from mplus user guide:
Data <- read.table("http://www.statmodel.com/usersguide/chap5/ex5.8.dat")
names(Data) <- c(paste("y", 1:6, sep = ""), paste("x", 1:3, sep = ""))
# Model:
model.Lavaan <- "f1 =~ y1 + y2 + y3\nf2 =~ y4 + y5 + y6\nf1 + f2 ~ x1 + x2 + x3 "
library("lavaan")
install.packages('lavaan')
library(lavaan)
Data <- read.table("http://www.statmodel.com/usersguide/chap5/ex5.8.dat")
names(Data) <- c(paste("y", 1:6, sep = ""), paste("x", 1:3, sep = ""))
# Model:
model.Lavaan <- "f1 =~ y1 + y2 + y3\nf2 =~ y4 + y5 + y6\nf1 + f2 ~ x1 + x2 + x3 "
# Run Lavaan:
fit <- lavaan:::cfa(model.Lavaan, data = Data, std.lv = TRUE)
# Plot path diagram:
semPaths(fit, title = FALSE, curvePivot = TRUE)
install.packages('semPlot')
library(semPlot)
semPaths(fit, title = FALSE, curvePivot = TRUE)
str(iris)
install.packages(reshape2)
library(reshape2)
data("attitude")
str(attitude)
qplot(x=Var1, y=Var2, data=melt(cor(attitude)), fill=value, geom="tile")
install.packages("igraph")
library(igraph)
net <- graph.data.frame(links, nodes, directed=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
library(igraph)
net <- graph.data.frame(links, nodes, directed=T)
net
plot(net, edge.arrow.size=.4,vertex.label=NA)
bristol.drugs <- read.csv("Bristol Drug Crimes.csv")
load("Bristol map.rda")
library(ggmap)
library(ggmap)
bristol.drugs <- read.csv("Bristol Drug Crimes.csv")
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
geom_point(
aes(x = Longitude, y = Latitude),
data = bristol.drugs) +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
suppressWarnings(
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
geom_point(
aes(x = Longitude, y = Latitude),
data = bristol.drugs) +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
)
suppressMessages(
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
geom_point(
aes(x = Longitude, y = Latitude),
data = bristol.drugs) +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
)
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
geom_point(
aes(x = Longitude, y = Latitude),
data = bristol.drugs, na.rm=T) +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
stat_density2d(
aes(x = Longitude, y = Latitude, fill = ..level..),  alpha = .3,
data = bristol.drugs,
geom = "polygon") +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggmap(bristol.map, extent = "device", legend = "topleft", extend = "panel") +
stat_density2d(
aes(x = Longitude, y = Latitude, fill = ..level..),  alpha = .3,
data = bristol.drugs,
geom = "polygon", na.rm=T) +
ggtitle("Drug Crimes in Bristol\n from Feb 2014 - Feb 2015") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("boxes.dot")
library(DiagrammeR)
mermaid("sequence.mmd")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(DiagrammeR)
devtools::install_github("bwlewis/rthreejs")
runApp(system.file("examples/scatterplot",package="threejs"))
library(shiny)
runApp(system.file("examples/scatterplot",package="threejs"))
N <- 100
i <- sample(3, N, replace=TRUE)
x <- matrix(rnorm(N*3),ncol=3)
lab <- c("small", "bigger", "biggest")
scatterplot3js(x, color=rainbow(N), labels=lab[i], size=i, renderer="canvas")
library(jsonlite)
install.packages('jsonlite')
install.packages("jsonlite")
N <- 100
i <- sample(3, N, replace=TRUE)
x <- matrix(rnorm(N*3),ncol=3)
lab <- c("small", "bigger", "biggest")
scatterplot3js(x, color=rainbow(N), labels=lab[i], size=i, renderer="canvas")
library(threejs)
N <- 100
i <- sample(3, N, replace=TRUE)
x <- matrix(rnorm(N*3),ncol=3)
lab <- c("small", "bigger", "biggest")
scatterplot3js(x, color=rainbow(N), labels=lab[i], size=i, renderer="canvas")
scatterplot3js(iris, color=species, labels=lab[i], size=i, renderer="canvas")
?lab
i
lab[i]
str(iris)
x
str(iris)
scatterplot3js(iris[,2:4], color=species, labels=Species, size=Sepal.Length, renderer="canvas")
scatterplot3js(iris[,2:4], color=Species, labels=Species, size=Sepal.Length, renderer="canvas")
scatterplot3js(iris[,2:4], color=iris$Species, labels=iris$Species, size=iris£Sepal.Length, renderer="canvas")
scatterplot3js(iris[,2:4], color=iris$Species, labels=iris$Species, size=iris$Sepal.Length, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(iris$Species), labels=iris$Species, size=iris$Sepal.Length, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(iris$Species), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=iris$Species, labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=lab[iris$Species], labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=as.character(iris$Species), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:5], color=as.character(iris$Species), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=as.character(iris$Species), labels=iris$Species, renderer="canvas")
?scatterplot3js
scatterplot3js(iris[,2:4], color=rainbow(iris$Species), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(3), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(length(iris$Species)), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(length(unique(iris$Species))), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(iris$Species), labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(3)[iris$Species], labels=iris$Species, renderer="canvas")
library(threejs)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye_male, type = 'multiBarChart')
library(rCharts)
nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye_male, type = 'multiBarChart')
install.packages("rchess")
lirary(rchess)
library(rchess)
plot(Chess$new())
library(threejs)
scatterplot3js(iris[,2:4], color=rainbow(3)[iris$Species], labels=iris$Species, renderer="canvas")
scatterplot3js(iris[,2:4], color=rainbow(3)[iris$Species], labels=iris$Species, renderer="canvas")
library(rCharts)
nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye_male, type = 'multiBarChart')
plot(Chess$new())
shiny::runApp('~/GitHub/Myanmar Dash/Treemap_Example')
shiny::runApp('~/GitHub/Myanmar Dash/Myanmar Shiny')
scatterplot3js(iris[,2:4], color=rainbow(3)[iris$Species], labels=iris$Species, renderer="canvas")
nPlot(Freq ~ Hair, group = 'Eye', data = hair_eye_male, type = 'multiBarChart')
